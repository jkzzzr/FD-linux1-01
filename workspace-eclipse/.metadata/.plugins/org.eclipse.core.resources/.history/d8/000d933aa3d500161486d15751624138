package combinAllCollection;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.StringTokenizer;
import java.util.Vector;

import SplitCollection.Data_doc_uri_index;
import record.Entry_ReadFile;
import record.Ireadfile;
import record.ReadFile_10;

public class CombineAllCollection {

	//线程安全
	//<uri,vector<docid>>
	public static Hashtable<String, Vector<String>> hashtable = new Hashtable<>();
	private Hashtable<String, Vector<String>> table = new Hashtable<>();
	public static void main(String[] args) {

	}
	public void combine(){
		String inputPath = "/media/ClueWeb12_CatB/ClueWeb12_";
		String outputPath = "/home/Lee/data/D1/ClueWeb12_";
		ArrayList <Hashtable<String, Vector<String>>> aList = new ArrayList<>();
		for (int i = 0; i <=19; i++){
			String istr = String.format("%02d", i);
			String tempInput = inputPath + istr;
			String tempoutput = outputPath + istr;
			File outputFile = new File(tempoutput);
			if (!outputFile.exists()){
				outputFile.mkdirs();
			}
			File file = new File(tempInput);
			File[] files = file.listFiles();
			for (File tempf : files){
				
				String en = tempf.getName();

				String input= "";
				input = inputPath+istr+"/"+en;
				
				String output = "";
				output = outputPath+istr+"/"+en;
				File outputFile2 = new File(output);
				if (!outputFile2.exists()){
					try{
					outputFile2.mkdir();
					}catch (Exception e) {
						System.err.println(output);
					}
				}
				Hashtable<String, Vector<String>> temph = new Hashtable<String, Vector<String>>();
				new MyThread(input, temph).start();
				aList.add(temph);
			}
		}
		System.out.println("第一步执行完毕！用时：");
		System.out.println("第二步开始：（）");
	}

	public void run(String inputPath, Hashtable<String, Vector<String>> hashtable) throws Exception{
		BufferedReader bReader = new BufferedReader(new FileReader(inputPath));
		String line = "";
		while ((line = bReader.readLine())!=null){
			StringTokenizer st = new StringTokenizer(line);
			String uri = st.nextToken();
			String docid = st.nextToken();
			uri = extract(uri);
			if (hashtable.contains(uri)){
				hashtable.get(uri).add(docid);
			}else {
				hashtable.put(uri, new Vector<String>(){{add(docid);}});
			}
		}
		bReader.close();
		
	}
	public String extract(String uri){
		String subURI = uri.substring(0, uri.lastIndexOf("."));
		int index = subURI.lastIndexOf(".");
		//如果是没有点的话，就是-1，那么正好加1
		//如果有的话，那么就应当时点的下表的后面一位开始，所以也是加1
		index ++;
		String returnString = uri.substring(index);
		return returnString;
	}
}
class MyThread extends Thread{
	String intputPath = "";
	Hashtable<String, Vector<String>> hashtable = null;
	public MyThread(String i,Hashtable<String, Vector<String>> hashtable) {
		intputPath = i;
		this.hashtable = hashtable;
	}
	@Override
	public void run() {
		super.run();
		Entry_ReadFile.STACK.add(false);
		File file = new File(intputPath);
		File [] files = file.listFiles();
		CombineAllCollection cac = new CombineAllCollection();
		for (File tempf: files){
			String filename = tempf.getName();
			try {
				cac.run(intputPath+"/"+filename, hashtable);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		Entry_ReadFile.STACK.pop();
		Thread.currentThread().interrupt();
	}
}
