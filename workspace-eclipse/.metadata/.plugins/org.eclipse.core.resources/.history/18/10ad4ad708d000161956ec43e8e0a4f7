package record;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.zip.GZIPInputStream;

public class ReadFile_10 implements Ireadfile{

	/**
	 * 记录硬盘中的ClueWeb09_English_2文件夹下面包含哪些en0000的文件夹
	 */
	private HashMap<String,String> HMap_floder_en = new HashMap<String,String>();
	public static void main(String[] args) {
		

	}
	public void run(){
		
		
	}
	/**
	 * 读取ClueWeb09_English_1一级的目录，将这个目录中包含的en0000存储在HMap_floder_en中
	 * 初始化HMap_floder_en对象
	 */
	public void init_floder_en(){
		String input_Prefix = "/media/clueweb09_1of2/ClueWeb09_English_";
		String outputPath_Prefix = "";
		
		//将en0000与外层的文件夹对应起来ClueWeb09_English_1
		//记录每个ClueWeb09_English_1下面存储的en0000文件夹有哪些
		HashMap<String, String> hMap = new HashMap<>();
		for (int i1 = 1; i1 <= 10; i1++){
			File file = new File(input_Prefix + i1 +"/");
		//	System.out.println(file.isDirectory() +"\t"+file.getAbsolutePath());
			File [] flordNames = file.listFiles();
			for (File string: flordNames){
				hMap.put(string.getName(), "ClueWeb09_English_" + i1);
			}
		}
		HMap_floder_en = hMap;
	}
	/**
	 * 读取en0000一级的目录，将这个目录包含的warc.gz文件存储在数组中返回
	 * @param output_prefix 示例：/home/Lee/音乐/result/en0000
	 */
	public String[] read_en(String flodername,String inputPath_prefix){
		//进入这个目录,同时创建输出目录
		String inputFilePath = inputPath_prefix + "/" + flodername + "/";
		
		
		File file = new File(inputFilePath);
		
		
		File [] files = file.listFiles();
		String [] sub_filename = new String[files.length];
		int index = 0;
		for (File temp_file: files){
			if (!temp_file.getName().contains("warc.gz")){
				continue;
			}
			String filename = temp_file.getName();
			filename = filename.substring(0, 2);
			sub_filename[index++] = filename;
		}
		return sub_filename;
		
	}
	/**
	 * 
	 * @param flodername	示例：en0000
	 * @param inputPath_prefix	示例：media/clueweb09_1of2/ClueWeb09_English_1/en0000
	 * runn("/media/clueweb09_1of2/ClueWeb09_English_1/en0000/00.warc.gz", "/home/Lee/音乐/result/en0000/00.warc", treeSet.get("00"));
			
	 * @throws Exception 
	 */
	public void filterAndWrite(String inputPath, String outputPath) throws Exception{
		File file2 = new File(outputPath);
		if (!file2.exists()){
			file2.createNewFile();
		}

		GZIPInputStream gzipInputStream = new GZIPInputStream(new FileInputStream(inputPath));
		OutputStream outputStream = new FileOutputStream(outputPath);
		
		BufferedReader bReader = new BufferedReader(new InputStreamReader(gzipInputStream, "UTF-8"));
//		BufferedWriter bWriter = new BufferedWriter(new OutputStreamWriter(outputStream, "UTF-8"));
		BufferedWriter bWriter = new BufferedWriter(new FileWriter(outputPath));
		
		String temp_doc = "";
		
		String templine = "";
		//去掉每个文件，最开头的一个说明小段落
		Index index = new Index();
		index.x = 0;
		for (int tempx = 1;tempx <=17;tempx++){
			templine = bReader.readLine();
			index.incream(templine);
		}
		
		while (true){
			templine = bReader.readLine();
			if (templine == null){
				break;
			}
			index.incream(templine);
			if (templine.startsWith("WARC/1.0")){
				LINEInfo lineInfo = new LINEInfo();
				lineInfo.skip = index.x;
				
				//WARC-Type: response
				//WARC-Date: 2012-02-10T21:51:20Z
				for (int tempx = 1;tempx <=4;tempx++){
					templine = bReader.readLine();
					index.incream(templine);
				}
				//WARC-TREC-ID: clueweb12-0000tw-00-00013
				templine = bReader.readLine();
				index.incream(templine);
				if (templine == null){
					break;
				}
				if (templine.startsWith("WARC-TREC-ID: ")){
					String extractDocid = "";
					try{
						extractDocid = templine.replaceAll("WARC-TREC-ID: ", "");
					}catch(Exception e){
						extractDocid = templine.substring(templine.indexOf("clueweb"));
					}
					lineInfo.docid = extractDocid;
				}
				
				
				//WARC-Target-URI:
				templine = bReader.readLine();
				index.incream(templine);
				if (templine == null){
					break;
				}
				if (templine.contains("WARC-Target-URI:")){
					String extractURI = "";
					try{
						extractURI = templine.replaceAll("WARC-Target-URI: ", "");
					}catch(Exception e){
						extractURI = templine.substring(templine.indexOf("http"));
					}
					lineInfo.URI = extractURI;
				}
				//WARC-Payload-Digest: sha1:YZUOJNSUMFG3JVUKM6LBHMRMMHWLVNQ4
				//WARC-IP-Address: 100.42.59.15
				//WARC-Record-ID: <urn:uuid:74edc71e-a881-4942-81fc-a40db4bf1fb9>
				//Content-Type: application/http; msgtype=response
				//Content-Length: 71726
				for (int tempx = 1;tempx <=5;tempx++){
					templine = bReader.readLine();
					index.incream(templine);
				}
				
				//HTTP/1.1 200 OK
				//Date: Fri, 10 Feb 2012 21:51:22 GMT
				//Server: Apache/2.2.21 (Unix) mod_ssl/2.2....
				//X-Powered-By: PHP/5.2.17
				//X-Pingback: http://cheapcosthealthinsurance.com/xmlrpc.php
				//Link: <http://cheapcosthealthinsurance.com/?p=711>; rel=shortlink
				//Connection: close
				//Content-Type: text/html; charset=UTF-
				for (int tempx = 1;tempx <=8;tempx++){
					index.incream(bReader.readLine());
				}
				templine = bReader.readLine();
				index.incream(templine);
				if (templine.contains("Content-Length:")){
					String extractLength = "";
					extractLength = templine.replaceAll("Content-Length: ", "");
					long needskip = Long.parseLong(extractLength);
					bReader.skip(needskip);
					index.x += needskip;
				}
				if (lineInfo.docid.length()<2){
			//		tools.run(templine+"\t"+lineInfo.toString());
				}else {
					bWriter.write(lineInfo.toString());
					bWriter.newLine();
				}
			}
			
	}
		bWriter.flush();
		bWriter.close();
	}
}
