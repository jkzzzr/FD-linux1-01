package record;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.util.HashMap;
import java.util.TreeSet;
import java.util.zip.GZIPInputStream;

public class ReadFile {

	/**
	 * 记录硬盘中的ClueWeb09_English_2文件夹下面包含哪些en0000的文件夹
	 */
	private HashMap<String,String> HMap_floder_en = new HashMap<String,String>();
	public static void main(String[] args) {
		

	}
	public void run(){
		
		
	}
	/**
	 * 读取ClueWeb09_English_1一级的目录，将这个目录中包含的en0000存储在HMap_floder_en中
	 * 初始化HMap_floder_en对象
	 */
	public void init_floder_en(){
		String input_Prefix = "/media/clueweb09_1of2/ClueWeb09_English_";
		String outputPath_Prefix = "";
		
		//将en0000与外层的文件夹对应起来ClueWeb09_English_1
		//记录每个ClueWeb09_English_1下面存储的en0000文件夹有哪些
		HashMap<String, String> hMap = new HashMap<>();
		for (int i1 = 1; i1 <= 10; i1++){
			File file = new File(input_Prefix + i1 +"/");
		//	System.out.println(file.isDirectory() +"\t"+file.getAbsolutePath());
			File [] flordNames = file.listFiles();
			for (File string: flordNames){
				hMap.put(string.getName(), "ClueWeb09_English_" + i1);
			}
		}
		HMap_floder_en = hMap;
	}
	/**
	 * 读取en0000一级的目录，将这个目录包含的warc.gz文件存储在数组中返回
	 * @param output_prefix 示例：/home/Lee/音乐/result/en0000
	 */
	public String[] read_en(String flodername,String inputPath_prefix){
		//进入这个目录,同时创建输出目录
		String inputFilePath = inputPath_prefix + "/" + flodername + "/";
		
		
		File file = new File(inputFilePath);
		
		
		File [] files = file.listFiles();
		String [] sub_filename = new String[files.length];
		int index = 0;
		for (File temp_file: files){
			if (!temp_file.getName().contains("warc.gz")){
				continue;
			}
			String filename = temp_file.getName();
			filename = filename.substring(0, 2);
			sub_filename[index++] = filename;
		}
		return sub_filename;
		for (String temp_filename :sub_filename){
		//	runn("/media/clueweb09_1of2/ClueWeb09_English_1/en0000/00.warc.gz", "/home/Lee/音乐/result/en0000/00.warc", treeSet.get("00"));
			runn(inputFilePath + temp_filename +".warc.gz",outputFilePath + temp_filename + ".warc", treeSet.get(flodername + "+" + temp_filename));
		}
	}
	/**
	 * 
	 * @param flodername	示例：en0000
	 * @param inputPath_prefix	示例：media/clueweb09_1of2/ClueWeb09_English_1/en0000
	 */
	public static void filterAndWrite(String inputPath, String outputPath){
		File file2 = new File(outputPath);
		if (!file2.exists()){
			file2.mkdir();
		}

		GZIPInputStream gzipInputStream = new GZIPInputStream(new FileInputStream(inputPath));
		OutputStream outputStream = new FileOutputStream(outputPath);

		BufferedReader bReader = new BufferedReader(new InputStreamReader(gzipInputStream, "UTF-8"));
		BufferedWriter bWriter = new BufferedWriter(new OutputStreamWriter(outputStream, "UTF-8"));
		
		String temp_doc = "";
		
		String templine = "";
		templine = bReader.readLine();
		bWriter.write(templine+"\n");
		//去掉每个文件，最开头的一个说明小段落
		long index = 0;
		while ((templine = bReader.readLine())!=null){
			index = incr
			index +=templine.length()+1;
			if (templine.startsWith("WARC/0.18")){
				if ((templine = bReader.readLine()) ==null) break;
				//中间一行是WARC-Type: response，没什么用到
				templine = bReader.readLine();
				if (templine == null) break;bReader.
				if (templine.contains("WARC-Target-URI:")){
					String extractURI = "";
					try{
						extractURI = templine.replaceAll("WARC-Target-URI: ", "");
					}catch(Exception e){
						extractURI = templine.substring(templine.indexOf("http"));
					}
				}
				
		//		WARC-Target-URI: http://00000-nrt-realestate.homepagestartup.com/
			}
		}
		StringBuffer sBuffer = new StringBuffer();
		boolean find = false;
		
		String temp_out_loop ="";
		while ((temp_out_loop = bReader.readLine())!=null){
			if (temp_out_loop.startsWith("WARC/0.18")){
				sBuffer = new StringBuffer();
				find = false;
			}
			StringBuffer subhead = new StringBuffer();
	//		bWriter.newLine();
			String temp_in_loop="";
			
			if (!find){
				//查找对应文档标号，也就是说，这个循环此时需要做的是在subhead中存储对应文档编号的头文件
				boolean infindProc = true;
				while ((temp_in_loop = bReader.readLine())!=null){
					if (infindProc){
						subhead.append("\n"+temp_in_loop);
		//				System.out.println(subhead.length());
					}else {
						if (temp_in_loop.startsWith("WARC/0.18")){
							infindProc = true;
							subhead.delete(0, subhead.length());
							subhead = new StringBuffer();
							subhead.append("\n"+temp_in_loop);
						}
						continue;
					}
					if (temp_in_loop.startsWith("WARC-TREC-ID:")){
						if (temp_doc == null || temp_doc.isEmpty()){
							bReader.close();
							bWriter.close();
							return;
						}
						String temp_doc_in_warc = "";
						temp_doc_in_warc = temp_in_loop.substring(temp_in_loop.indexOf("clueweb09"));
						if (temp_doc_in_warc.equals(temp_doc)){
					//		System.out.println("found" + temp_doc);
							hSet.pollFirst();
							if (hSet.isEmpty()){
								temp_doc = null;
							}else {
								temp_doc = hSet.first();
							}
							infindProc = false;
							find = true;
						}
						else {
							infindProc = false;
							if (temp_doc_in_warc.compareTo(temp_doc) <0){
								find = false;					
								
							}else {
								System.err.println("error "+ temp_doc);
								hSet.pollFirst();

			//					new toolsWrite().print(x, "****************\n\t"+temp_doc);
							}
						}
					}
				
					if (find){
						sBuffer.append("\n"+subhead+"\n");
						bWriter.write(subhead.toString()+"\n");
						temp_out_loop = bReader.readLine();
						break;
					}else {
						continue;
					}
				}
			}
			bWriter.write(temp_out_loop+"\n");
			
		}
		bReader.close();
		bWriter.close();
		
		
	}
	public static long incream(long x,String line){
		return x+line.length()+1;
	}
}
public class index{
	long x = 0;
	static incream(){
		
	}
}
